#!/bin/sh

# this script can be found at https://github.com/losingkeys/dmenu-custom

if [ "$1" = "-w" -o "$1" = "--new-window" ]; then
  newWindow=true
fi

websitesList="$HOME/.dmenu-web"
terminalProgramsList="$HOME/.dmenu-terminal"

launchHistory="$HOME/.dmenu-custom-history"
# NOTE: creating the file with `touch' causes a problem replacing its first line
# later (using sed) because there is no first line. That's why echo is used here
test -s "$launchHistory" || echo > "$launchHistory"
chmod 600 "$launchHistory"

_get_launchable_websites() {
  if [ -s "$websitesList" ]
  then
    grep -v ^# "$websitesList"     | \
      cut -d, -f2,3,4,5,6,7,8,9,10 | \
      tr , "\n"                    | \
      tr -d "[:blank:]"            | \
      sort -r                      | \
      uniq                         | \
      tr -s "\n"                   | \
      sort
  fi
}

_get_launchable_programs() {
  if [ -x "$(command -v dmenu_path)" ]; then
    dmenu_path
  else
    ls /usr/bin
  fi
}

_first_exists() {
  for i in "$@"; do
    if [ -x "$(command -v -- $i)" ]; then
      echo "$i"
      break
    fi
  done
}


if [ "$#" -ge 1 -a -x "$(command -v -- "$1")" ]; then
  terminal="$1"
  shift
else
  terminal=$(_first_exists \
    "$TERMINAL" \
    "i3-sensible-terminal" \
    "x-terminal-emulator" \
    "urxvt" \
    "xterm"
  )
fi

# prompt the user to choose a site/program/program alias, showing the most recently launched first
choice="$(printf "%s\n%s" "$(_get_launchable_websites)" "$(_get_launchable_programs)" | sort | uniq \
          | cat - "$launchHistory" "$launchHistory" | sort | uniq -u | cat "$launchHistory" - \
          | dmenu $DMENU_CUSTOM_OPTIONS)"

if [ -z "$(echo "$choice" | tr -d "[:blank:]")" ]
then
  exit
fi

url="$(
  grep -v "^#" "$websitesList"           | \
  grep --word-regexp "\(,\s*\)\+$choice" | \
  cut -d, -f1                            | \
  tr -d "[:blank:]"
)"

# get the first word of the launched app
# this /should/ be the name of the app, but could possibly be an environment variable (TODO, handle this)
# this'll be added to the launch history so it can be displayed first next time
firstWordOfChoice="$(echo "$choice" | cut -d" " -f1)"

# checks if first word of choice includes a dot followed by exactly three characters (a TLD)
if [ "$(echo "$firstWordOfChoice" | grep -e "\.[a-z]\{3\}\([^a-z]\|$\)")" ]; then
  url=$choice
fi

# remove the choice from the history file,
# and add it back in at the top (ordered by "most recently used")
# thanks https://stackoverflow.com/questions/5410757/delete-lines-in-a-text-file-that-containing-a-specific-string
sed -i "/^$firstWordOfChoice$/d" "$launchHistory"
# thanks https://stackoverflow.com/questions/2503254/unix-prepending-a-file-without-a-dummy-file/8234805#8234805
sed -i "1i$firstWordOfChoice" "$launchHistory"

if [ "$url" ]; then
  if [ "$BROWSER" ]; then
    if [ "$BROWSER" = firefox ]; then
      firefox=true
    elif [ "$BROWSER" = chromium ]; then
      chromium=true
    fi
  elif [ -x "$(command -v firefox)" ]; then
    firefox=true
  elif [ -x "$(command -v chromium)" ]; then
    chromium=true
  fi

  if [ $firefox ]; then
    if [ $newWindow ]; then
      exec firefox -new-window "$url"
    else
      exec firefox "$url"
    fi
  elif [ $chromium ]; then
    if [ $newWindow ]; then
      exec chromium --app="$url"
    else
      exec chromium "$url"
    fi
  else
    exec "$BROWSER" "$url"
  fi

  echo Error opening a browser. 2>&1
  # shellcheck disable=2016
  echo 'Please set "$BROWSER", or install firefox or chromium.' 2>&1
  exit 1
fi

if [ -e "$terminalProgramsList" ]; then
  # chop the choice up so you can pass arguments via dmenu
  # (e.g. mutt -R to open a mutt (mail program) in read-only mode)
  firstWordOfChoice="$(echo "$choice" | cut -d" " -f1)"
  override=$(grep "$terminalProgramsList" -e $firstWordOfChoice)
fi

# isxapp is 0 if console, 1 if graphical
if [ -n "$override" ]; then
  isxapp=$(echo "$override" | cut -d" " -f2)
else
  fullpath=$(command -v "$firstWordOfChoice")
  # query ldd to guess if graphical if not otherwise defined
  if [ -n "$(ldd "$fullpath" | grep libX11)" ]; then
    isxapp="1"
  else
    isxapp="0"
  fi
fi

if [ "0" != "$isxapp" ]; then
  exec $choice
else
  exec $terminal -e $choice
fi

